///自定义qsort函数       （回调函数 函数指针）
#include <stdio.h>
#include <string.h>

void swap(char* buf1,char* buf2,int width)
{
    int i = 0;
    for(i=0;i<width;i++)
    {
        char tmp = *buf1;
        *buf1 = *buf2;
        *buf2 = tmp;
        buf1++;
        buf2++;
    }
}

void bubble_sort(void *base,int sz,int width,int(*cmp)(void*e1,void*e2))
{
    int i = 0;
    ///趟数
    for(i=0;i<sz-1;i++)
    {
        ///每一趟比较的对数
        int j = 0;
        for(j=0;j<sz-1-i;j++)
        {
            ///两个元素的比较
            if(cmp((char*)base+j*width,(char*)base+(j+1)*width)>0)
            {
                ///交换
                swap((char*)base+j*width,(char*)base+(j+1)*width,width);
            }
        }
    }
}

int cmp_int(void* e1,void* e2)
{
    return *(int*)e1 - *(int*)e2;
}


void test1()
{
    int arr[10] = {9,8,7,6,5,4,3,2,1,0};
    int sz = sizeof(arr)/sizeof(arr[0]);
    bubble_sort(arr,sz,sizeof(arr[0]),cmp_int);
    int i = 0;
    for(i=0;i<sz;i++)
    {
        printf("%d ",arr[i]);
    }
    printf("\n");
}

int cmp_float(void*e1,void*e2)
{
    return *(float*)e1 - *(float*)e2;
}

void test2()
{
    float f[] = {9.0,8.0,7.0,6.0,5.0,4.0};
    int sz = sizeof(f)/sizeof(f[0]);
    bubble_sort(f,sz,sizeof(f[0]),cmp_float);
    int i = 0;
    for(i=0;i<sz;i++)
    {
        printf("%f ",f[i]);
    }
    printf("\n");
}
struct stu
{
    char name[20];
    int age;
};

int cmp_stu_by_age(void*e1,void*e2)
{
    return ((struct stu*)e1)->age - ((struct stu*)e2)->age;
}

void test3()
{
    struct stu s[3] = {{"zhangsan",20},{"lisi",30},{"wangwu",10}};
    int sz = sizeof(s)/sizeof(s[0]);
    bubble_sort(s,sz,sizeof(s[0]),cmp_stu_by_age);
    int i = 0;
    for(i=0;i<sz;i++)
    {
        printf("%d ",s[i].age);
    }
    printf("\n");
}

int cmp_stu_by_name(void*e1,void*e2)
{
    return (int) strcmp(((struct stu*)e1)->name,((struct stu*)e2)->name);
}

void test4()
{
    struct stu s[3] = {{"zhangsan",20},{"lisi",30},{"wangwu",10}};
    int sz = sizeof(s)/sizeof(s[0]);
    bubble_sort(s,sz,sizeof(s[0]),cmp_stu_by_name);
    int i = 0;
    for(i=0;i<sz;i++)
    {
        printf("%s ",s[i].name);
    }
}



int main()
{
    test1();
    test2();
    test3();
    test4();
    return 0;
}

///回调函数：通过一个函数指针调用的函数 如果你把函数的指针（地址）作为参数传递给另一个函数 当这个指针被用来调用其所指向的
///           函数时 就说这是回调函数 回调函数不是由该函数的实现方直接调用 
///这里可以理解为把各个test()函数所调用的cmp_函数的地址传给bubble函数中的int(*cmp) 在bubble函数内部再通过指针调用cmp_函数 就是回调的原理
///注意void*p为无类型指针 可以接收任意类型的地址 但不能进行解引用操作 不能进行+-整数的操作 因为不知道具体是什么类型
///   解决方法是利用强制类型转换
///qsort函数：第一个参数是待排序数组的首元素地址     第二个参数是待排序数组的元素个数
///            第三个参数是待排序数组的每个元素的大小 单位字节   第四个参数是函数指针 要比较的两个元素所用函数的地址 这个函数自己实现
///利用(char*)加上width的原因是 (char*)每次只访问1个字节 就能遍历数组的每个元素
