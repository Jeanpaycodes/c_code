///qsort函数的认识
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

int cmp_int(const void* e1,const void* e2)
{
    return *(int*)e1 - *(int*)e2;
}


void test1()
{
    int arr[10] = {9,8,7,6,5,4,3,2,1,0};
    int sz = sizeof(arr)/sizeof(arr[0]);
    qsort(arr,sz,sizeof(arr[0]),cmp_int);
    int i = 0;
    for(i=0;i<sz;i++)
    {
        printf("%d ",arr[i]);
    }
    printf("\n");
}

int cmp_float(const void*e1,const void*e2)
{
    return *(float*)e1 - *(float*)e2;
}

void test2()
{
    float f[] = {9.0,8.0,7.0,6.0,5.0,4.0};
    int sz = sizeof(f)/sizeof(f[0]);
    qsort(f,sz,sizeof(f[0]),cmp_float);
    int i = 0;
    for(i=0;i<sz;i++)
    {
        printf("%f ",f[i]);
    }
    printf("\n");
}
struct stu
{
    char name[20];
    int age;
};

int cmp_stu_by_age(const void*e1,const void*e2)
{
    return ((struct stu*)e1)->age - ((struct stu*)e2)->age;
}

void test3()
{
    struct stu s[3] = {{"zhangsan",20},{"lisi",30},{"wangwu",10}};
    int sz = sizeof(s)/sizeof(s[0]);
    qsort(s,sz,sizeof(s[0]),cmp_stu_by_age);
    int i = 0;
    for(i=0;i<sz;i++)
    {
        printf("%d ",s[i].age);
    }
    printf("\n");
}

int cmp_stu_by_name(const void*e1,const void*e2)
{
    return (int) strcmp(((struct stu*)e1)->name,((struct stu*)e2)->name);
}

void test4()
{
    struct stu s[3] = {{"zhangsan",20},{"lisi",30},{"wangwu",10}};
    int sz = sizeof(s)/sizeof(s[0]);
    qsort(s,sz,sizeof(s[0]),cmp_stu_by_name);
    int i = 0;
    for(i=0;i<sz;i++)
    {
        printf("%s ",s[i].name);
    }
}



int main()
{
    test1();
    test2();
    test3();
    test4();
    return 0;
}

///qsort函数的认识
///1）第一个参数是待排序数组的首元素地址 即数组名
///2）第二个参数是待排序数组的元素个数 即sz
///3）第三个参数是待排序数组的每个元素的大小 利用sizeof
///4）第四个参数是函数指针 比较两个元素所用函数的地址 该函数要自己实现 即int_cmp

///void* 是无类型指针 可以接收任意类型的地址  但不能进行解引用操作 不能进行加减整数的操作 可以利用强制类型转换处理
